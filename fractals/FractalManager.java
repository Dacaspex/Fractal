package fractals;

import java.awt.image.BufferedImage;
import java.util.HashMap;

import gui.FractalPanel;
import util.Settings;

public class FractalManager {

	private HashMap<String, AbstractFractal> fractalList;

	private AbstractFractal selectedFractal;

	private FractalPanel fractalPanel;

	public FractalManager() {

		fractalList = new HashMap<String, AbstractFractal>();

		loadDefaultFractals();
		setDefaultFractal();

	}

	/**
	 * Generates an image with given width and height coordinated by the current
	 * fractal selected
	 * 
	 * @param width
	 *            The width of the image
	 * @param height
	 *            The height of the image
	 * @return An fractal image generated by the currently selected fractal
	 */
	public BufferedImage generateImage(int width, int height) {

		return selectedFractal.getImage(width, height);

	}

	/**
	 * Loads the default fractals into the list
	 */
	public void loadDefaultFractals() {

		fractalList.put("Julia Set", new JuliaFractal());
		fractalList.put("Mandelbrot Set", new MandelBrotFractal());

	}

	/**
	 * Sets the default fractal to be displayed at startup, set in the
	 * settings.xml
	 */
	public void setDefaultFractal() {

		selectedFractal = fractalList.get(Settings.getDefaultFractal());

	}

	/**
	 * Add a fractal to the list of available fractals by it's name and the
	 * fractal itself
	 * 
	 * @param name
	 *            The name of the fractal. Should be a unique name
	 * @param fractal
	 *            An instance of the fractal
	 */
	public void addFractal(String name, AbstractFractal fractal) {

		fractalList.put(name, fractal);

	}

	/**
	 * @return The currently selected fractal
	 */
	public AbstractFractal getSelectedFractal() {

		return selectedFractal;

	}

	/**
	 * Sets the selected fractal to be drawn. Also updates the screen to draw
	 * the new fractal
	 * 
	 * @param name
	 *            The name of the fractal to be selected
	 */
	public void setSelectedFractal(String name) {

		selectedFractal = fractalList.get(name);
		updateFractalPanel();

	}

	/**
	 * @return A list of names of the loaded fractals
	 */
	public String[] getLoadedFractals() {

		String[] fractalNames = new String[fractalList.size()];
		return fractalList.keySet().toArray(fractalNames);

	}

	/**
	 * Function to specify which FractalPanel draws the fractal
	 * 
	 * @param fractalPanel
	 *            The fractalPanel which draws the fractal
	 */
	public void setFractalPanel(FractalPanel fractalPanel) {

		this.fractalPanel = fractalPanel;

	}

	/**
	 * Forces the FractalPanel to draw a fractal
	 */
	public void updateFractalPanel() {

		fractalPanel.draw();

	}

}
